https://school.programmers.co.kr/learn/courses/30/lessons/12954
/// x만큼 간격이 있는 n개의 숫자


class Solution {
    public long[] solution(int x, int n) {
        long[] answer = new long[n];
        for(int i = 0; i < n; i++){
            answer[i] = x + (x * (long)i);
        }
        return answer;
    }
}












https://school.programmers.co.kr/learn/courses/30/lessons/12928
/// 약수의 합


class Solution {
    public int solution(int n) {
        int answer = 0;
        for(int i = 1; i <= n; i++){
            if(n % i == 0){
                answer += i;
            }
        }
        return answer;
    }
}








https://school.programmers.co.kr/learn/courses/30/lessons/150370
/// 개인정보 수집 유효기간



import java.util.*;

class Solution {
    public int[] solution(String today, String[] terms, String[] privacies) {
        Map<String, Integer> map1 = new HashMap<>();
        List<Integer> list1 = new ArrayList<>();
        String[] today_arr = today.split("\\.");
        System.out.print(Arrays.toString(today_arr));
        int today_year = Integer.parseInt(today_arr[0]);
        int today_month = Integer.parseInt(today_arr[1]);
        int today_day = Integer.parseInt(today_arr[2]);
        for(int i = 0; i < terms.length; i++){
            String[] arr = terms[i].split(" ");
            map1.put(arr[0], Integer.parseInt(arr[1]));
        }
        
        for(int i = 0; i < privacies.length; i++){
            String[] p_arr = privacies[i].split(" ");
            String[] p_date = p_arr[0].split("\\.");
            
            int plus_month = map1.get(p_arr[1]);
            int plus_year = 0;
            int day = Integer.parseInt(p_date[2]);
            int month = Integer.parseInt(p_date[1]) + plus_month;
            while(month > 12){
                month = month - 12;
                plus_year++;
            }
            int year = Integer.parseInt(p_date[0]) + plus_year;
            if(year < today_year){
                list1.add(i + 1);
            } else if(year > today_year){
                continue;
            } else if(year == today_year) {
                if(month < today_month){
                    list1.add(i + 1);
                } else if(month > today_month){
                    continue;
                } else if(month == today_month) {
                    if(day < today_day){
                        list1.add(i + 1);
                    } else if(day > today_day){
                        continue;
                    } else if(day == today_day) {
                        list1.add(i + 1);
                    }
                }
            }
        }
        int[] answer = list1.stream().mapToInt(i->i).toArray();
        return answer;
    }
}








https://school.programmers.co.kr/learn/courses/30/lessons/159994
/// 카드 뭉치


class Solution {
    public String solution(String[] cards1, String[] cards2, String[] goal) {
        String answer = "Yes";
        int idx1 = 0;
        int idx2 = 0;
        for(int i = 0; i < goal.length; i++){
            if(idx1 < cards1.length && cards1[idx1].equals(goal[i])){
                idx1++;
                continue;
            } else if(idx2 < cards2.length && cards2[idx2].equals(goal[i])){
                idx2++;
                continue;
            } else {
                answer = "No";
                break;
            }
        }
        return answer;
    }
}

