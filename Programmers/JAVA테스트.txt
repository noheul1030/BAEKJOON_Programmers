문제 1

public Class Solution{
	public static void main(String[] args) {
		int[] A_Class = { 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 };
		int[] B_Class = { 111, 112, 113, 114, 115, 116, 117, 118, 119, 120 };

		String[] A_name = { "홍길일", "홍길이", "홍길삼", "홍길사", "홍길오", "홍길육", "홍길칠", "홍길팔", "홍길구", "홍길십", };
		String[] B_name = { "홍동일", "홍동이", "홍동삼", "홍동사", "홍동오", "홍동육", "홍동칠", "홍동팔", "홍동구", "홍동십", };

		int[] A_kor = { 67, 55, 77, 33, 46, 35, 77, 34, 99, 100 };
		int[] B_kor = { 11, 77, 22, 23, 66, 100, 100, 23, 44, 22 };

		int[] A_eng = { 11, 77, 66, 77, 34, 99, 100, 23, 44, 22 };
		int[] B_eng = { 44, 33, 99, 100, 23, 44, 22, 23, 66, 100 };

		int[] A_mat = { 44, 33, 99, 100, 23, 44, 22, 23, 66, 100 };
		int[] B_mat = { 44, 33, 22, 23, 66, 100, 22, 23, 66, 100 };

		int[] A_sum = new int[A_Class.length];
		int[] B_sum = new int[B_Class.length];
		
		for (int i = 0; i < A_Class.length; i++) {
			A_sum[i] = A_kor[i] + A_eng[i] + A_mat[i];
			B_sum[i] = B_kor[i] + B_eng[i] + B_mat[i];
		}
		System.out.println("A_sum : "+ Arrays.stream(A_sum).boxed().collect(Collectors.toList()));
		System.out.println("B_sum : "+Arrays.stream(B_sum).boxed().collect(Collectors.toList()));
		System.out.println();

		int A_check = -1;
		int B_check = -1;

		// A반 총점 순위
		while (A_check != 0) {
			int cnt = 0;

			int tempClass = 0;
			String tempName = "";
			int tempSum = 0;

			for (int i = 0, j = 1; i < A_Class.length - 1; i++) {
				if (A_sum[i] < A_sum[j]) {
					cnt++;

					tempClass = A_Class[j];
					A_Class[j] = A_Class[i];
					A_Class[i] = tempClass;

					tempName = A_name[j];
					A_name[j] = A_name[i];
					A_name[i] = tempName;

					tempSum = A_sum[j];
					A_sum[j] = A_sum[i];
					A_sum[i] = tempSum;
				}
				j++;
			}
			A_check = cnt;
		}
		System.out.println("< 버블 sort >");
		System.out.println();
		System.out.println("A반 총점 순위\n");
		System.out.println("학번 / 이름 / 총점 \n");
		for (int i = 0; i < A_sum.length; i++) {
			System.out.println(A_Class[i] + " / " + A_name[i] + " / " + A_sum[i]);
		}

		// B반 총점 순위
		while (B_check != 0) {
			int cnt = 0;

			for (int i = 0, j = 1; i < B_Class.length - 1; i++) {
				int tempClass = 0;
				String tempName = "";
				int tempSum = 0;

				if (B_sum[i] < B_sum[j]) {
					cnt++;

					tempClass = B_Class[j];
					B_Class[j] = B_Class[i];
					B_Class[i] = tempClass;

					tempName = B_name[j];
					B_name[j] = B_name[i];
					B_name[i] = tempName;

					tempSum = B_sum[j];
					B_sum[j] = B_sum[i];
					B_sum[i] = tempSum;
				}
				j++;
			}
			B_check = cnt;
		}
		System.out.println();
		System.out.println("B반 총점 순위\n");
		System.out.println("학번 / 이름 / 총점 \n");
		for (int i = 0; i < B_sum.length; i++) {
			System.out.println(B_Class[i] + " / " + B_name[i] + " / " + B_sum[i]);
		}
	}
}

문제 2

public Class Solution2{
	public static void main(String[] args) {
		System.out.println(calculateCombination(3, 3));

	}

	public static int calculateCombination(int n, int r) {
		if(n < r) return 0;
		
		int answer = 0;

		answer = fac(n) / (fac(r) * fac(n - r));
		return answer;
	}

	public static int fac(int num) {
		if (num == 1 || num == 0)
			return 1;
		else
			return num * fac(num - 1);
	}
}

문제 3

import java.util.*;
public Class Solution3{
	public static void main(String[] args){
		int a[] = new int [1001];
		for(int i = 0; i < a.length-1; i++){
			a[i] = (int) Math.random()*100+1;
		}
		a[1001] = 1000;
		Arrays.sort(a);
		for(int i = 0; i < a.length; i++){
			System.out.printf("%d)%d\n",i,a[i]);
		}
		
		int index = 0;
		for(int i = a.length/2, j = a.length/2+1; i >= 0; i--){
			if(a[i] == 88) {
				index = i; 
				break;
			}
			if(a[j] == 88) {
				index = j; 
				break;
			}
			
			if(Math.abs(a[i]-88) < Math.abs(a[j]-88)){
				if(Math.abs(a[i]-88) < Math.abs(a[index]-88)){
					index = i;
				}
			}else{
				if(Math.abs(a[j]-88) < Math.abs(a[index]-88)){
					index = j;
				}
			}
			j++;
		}
		
		int temp = 0;
		int temp2 = 0;
		if (a[index] < 88) {
			index++;
			temp = a[index];
			a[index] = 88888888;
			for (int i = index + 1; i < a.length; i++) {
				temp2 = a[i];
				a[i] = temp;
				temp = temp2;
				
			}
		}
		if (a[index] >= 88) {
			temp = a[index];
			a[index] = 88000000;
			for (int i = index + 1; i < a.length; i++) {
				temp2 = a[i];
				a[i] = temp;
				temp = temp2;
			}
		}
		
		for(int i = 0; i < a.length; i++){
			System.out.printf("%d)%d\n",i,a[i]);
		}
	}



//	// 재귀적 탐색
//	public static int binarySearch1(int key, int low, int high) {
//		int mid;
//
//		if (low <= high) {
//			mid = (low + high) / 2;
//
//			if (key == arr[mid]) { // 탐색 성공
//				return mid;
//			} else if (key < arr[mid]) {
//				return binarySearch1(key, low, mid - 1); // 왼쪽 부분 탐색
//			} else {
//				return binarySearch1(key, mid + 1, high); // 오른쪽 부분 탐색
//			}
//		}
//
//		return -1; // 탐색 실패
//	}
//
//	// 반복적 탐색
//	public static int binarySearch2(int key, int low, int high) {
//		int mid;
//
//		while (low <= high) {
//			mid = (low + high) / 2;
//
//			if (key == arr[mid]) {
//				return mid;
//			} else if (key < arr[mid]) {
//				high = mid - 1;
//			} else {
//				low = mid + 1;
//			}
//		}
//
//		return -1; // 탐색 실패
//	}	
}

