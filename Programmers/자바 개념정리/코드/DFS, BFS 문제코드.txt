package DFS;

import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;

public class DFS_ex1 {
	private static int[] dx = {0,1,0,-1};
	private static int[] dy = {1,0,-1,0};
	
	public static void main(String[] args) {
		int n = 4;
		int m = 5;
		int[][] arr = {{0,0,1,1,0},{0,0,0,1,1},{1,1,1,1,1},{0,0,0,0,0}};
		/*
		 00110
		 00011
		 11111
		 00000
		 */
		DFS_Start(arr);
		BFS(arr);
		
		System.out.println("\n\n Random 배열");
		int[][] arr_random = new int[8][7];
		for(int i = 0; i < arr_random.length; i++) {
			for(int j = 0; j < arr_random[i].length; j++) {
				int tmp = (int)(Math.random() * 2);
				arr_random[i][j] = tmp;
				System.out.print(arr_random[i][j]+ " ");
			}
			System.out.println();
		}
		System.out.println("\n");
		
		DFS_Start(arr_random);
		BFS(arr_random);

	}
	
	
	public static void BFS(int[][] arr) {
		Queue<int[]> q1 = new LinkedList<>();
		boolean[][] check = new boolean[arr.length][arr[0].length];
		int cnt = 0;
		for(int i = 0; i < arr.length; i++) {
			for(int j = 0; j < arr[i].length; j++) {
				if(!check[i][j] && arr[i][j] == 0) {
					System.out.println();
					check[i][j] = true;
					q1.offer(new int[] {i,j});
					cnt++;
					while(!q1.isEmpty()) {
						int[] tmp = q1.poll();
						System.out.println("BFS   i : " + tmp[0] + ", j : "+ tmp[1]);
						for(int k = 0; k < 4; k++) {
							int i2 = tmp[0] + dx[k];
							int j2 = tmp[1] + dy[k];
							if(0 <= i2 && i2 < arr.length &&0 <= j2 && j2 < arr[0].length && arr[i2][j2] == 0 && !check[i2][j2]) {
								check[i2][j2] = true;
								q1.offer(new int[] {i2,j2});
							}
						}
					}
				}
			}
		}
		System.out.println("총 얼음 개수 : "  + cnt);
	}

	public static void DFS_Start(int[][] arr) {
		// boolean체크용  기본값 False
		boolean[][] check = new boolean[arr.length][arr[0].length];
		int cnt = 0;
		for(int i = 0; i < arr.length; i++) {
			for(int j = 0; j < arr[i].length; j++) {
				if(!check[i][j] && arr[i][j] == 0) {
					System.out.println();
					cnt++;
					DFS1(i,j,arr,check);
				}
			}
		}
		System.out.println("총 얼음 개수 : "  + cnt);
	}
	
	
	public static void DFS1(int i, int j, int[][] arr, boolean[][] check) {
		check[i][j] = true;
		System.out.println("DFS   i : " + i + ", j : "+ j);
		for(int k = 0; k < 4; k++) {
			int i2 = i + dx[k];
			int j2 = j + dy[k];
			if(0 <= i2 && i2 < arr.length &&0 <= j2 && j2 < arr[0].length && arr[i2][j2] == 0 && !check[i2][j2]) {
				DFS1(i2,j2,arr,check);
			}
		
		}
	}
	

}
